Datos importantes de la pagina:
Usuario: admin@gmail.com	
Pwd: admin

COMANDOS IMPORTANTES:

 -ABRIR PROYECTO {
cd EntornoDePrueba
Scripts\activate
cd..
cd ProyectoFinal
python manage.py runserver
}

- Nuevo Entorno {
virtualenv EntornoProyectoIntegrador

EntornoProyectoIntegrador\Scripts\activate
}




URLS ACTUALES:
http://127.0.0.1:8000/auth/crear/
http://127.0.0.1:8000/institucion/lista/
http://127.0.0.1:8000/carrera/lista/
http://127.0.0.1:8000/profesor/lista/
http://127.0.0.1:8000/materia/lista/
http://127.0.0.1:8000/auth/home/
http://127.0.0.1:8000/auth/perfil/1/

###################################################### 07/04/2024 ######################################################
Pedir DNI para que opinen / DNI para cuenta verificada.

###################################################### 05/04/2024 ######################################################
Mejoras al Login / Home / Register

###################################################### 02/04/2024 ######################################################

Continuacion de Investigacion

###################################################### 01/04/2024 ######################################################
El comando: {% if request.path == 'URL' %} compara la url actual con la que vos designes y actua en consecuencia.

Investigacion de Login y Register. Tambien Google Auth.

###################################################### 31/03/2024 ######################################################
Crear home, login y register HTML.

Crear el back de home, login y register.

Investigar y desarrollar la forma en que se pueda acceder con la cuenta de google.

Agregar el tipo Visitante al usuario.

Agregar los atributos sexo y edad.


###################################################### 24/03/2024 ######################################################
Rework de proyecto. Vuelvo a retomarlo con otra vista, quiero crear todas las vistas/pages, luego darle la funcionalidad a cada boton/obj interactuable. OBLIGATORIO: REGISTER-LOGIN con email o con google account.


###################################################### 6/11/2023 ######################################################


Duración: 10hs

Problemas y Desafíos: Completar los modelos, conseguir que migren al servidor.

Logros y Éxitos: Completar el diagrama y codificacion de los modulos, completar la bitacora, estar "encaminado".

Próximos Pasos: Codear los valores default de los atributos del modulo ya que necesitan valores por ser obligatorios, luego que se suba exitosamente al servidor hacer una prueba cargando 3 cosas de cada modelo. Luego hacer login y vistas.

Notas Adicionales: Cada dia avanzar un poco, para no perder el hilo.

Lecciones Aprendidas: Romper un poco la conciencia que me intimidaba a codear

###################################################### 10/11/2023 ######################################################


Duración: 4

Problemas y Desafíos: Modelos

Logros y Éxitos: Modelos

Próximos Pasos: Hacer vistas, y los templates. Buscar ejemplos de cuadros de materia y formato tabla, 

Notas Adicionales: Clase con el profesor

Lecciones Aprendidas: Migraciones, related names, showmigrations, errores de modelaje.

###################################################### 11/11/2023 ######################################################


Duración: 2

Problemas y Desafíos: Vistas

Logros y Éxitos: Avanze en las vistas home de cada modelo

Próximos Pasos: Terminar las vistas

Notas Adicionales: Aprender mas de vistas

Lecciones Aprendidas: vincular una vista a un template

###################################################### 12/11/2023 ######################################################

Duración: 3

Problemas y Desafíos: Vistas que relacionen los modelos

Logros y Éxitos: Avanze en las vistas template 

Próximos Pasos: Terminar las vistas

Notas Adicionales: Aprender mas de vistas

Lecciones Aprendidas: vincular una vista a un template

###################################################### 14/11/2023 ######################################################

Duración: 2

Problemas y Desafíos: Vistas de form

Logros y Éxitos: Avanze en las vistas template, carpeta static.

Próximos Pasos: Terminar las vistas

Notas Adicionales: Aprender mas de vistas

Lecciones Aprendidas: vincular una vista a un template

###################################################### 16/11/2023 ######################################################

Duración: 5

Problemas y Desafíos: Vistas y templates

Logros y Éxitos: Vistas form, conexion de templates, conexion de vistas, creacion de perfil

Próximos Pasos: Mejoras

Notas Adicionales: Aprender mas de vistas, perfil, autenticacion, api, front, etc

Lecciones Aprendidas: 

<!-- <p>Pertenece a la institucion: {{ nombre_instituto }}</p> -->
<!-- <p>Pertenece a la carrera: {{  }}</p> -->
<!-- <p>Participo en las cursadas: {{  }}</p>  -->


************************************************************************  CODIGO POSIBLE A REUSAR ************************************************************************

LOGIN PROFE:

<!DOCTYPE html>
<html lang="es">
    <head>
        <title>Iniciar sesión</title>
        <link rel="stylesheet" href="https://code.getmdl.io/1.3.0/material.indigo-pink.min.css" />
        <style>
            .error-message {
                color: red;
            }
        </style>
    </head>

    <body>
        <div class="mdl-layout mdl-js-layout mdl-layout--fixed-header">

            <header class="mdl-layout__header">
                <div class="mdl-layout__header-row">
                    <span class="mdl-layout-title">Login</span>
                </div>
            </header>

            <main class="mdl-layout__content">
                <div class="mdl-grid">
                    <div class="mdl-cell mdl-cell--4-col mdl-cell--4-offset">
                        <div class="mdl-card mdl-shadow--6dp">

                            <div class="mdl-card__title mdl-color--primary mdl-color-text--white">
                                <h2 class="mdl-card__title-text">Iniciar sesión</h2>
                            </div>
                            
                            <div class="mdl-card mdl-shadow--6dp">
                                <div class="mdl-card__supporting-text">

                                    <form method="post">
                                        {% csrf_token %}
                                        {{ form.as_p }}
                                        <button type="submit" class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-js-ripple-effect">
                                            Iniciar sesión
                                        </button>
                                    </form>

                                    {% for message in messages %}
                                    <div class="mdl-textfield">
                                        <p class="error-message">{{ message }}</p>
                                    </div>
                                    {% endfor %}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>

        <script src="https://code.getmdl.io/1.3.0/material.min.js"></script>
    </body>
</html>

LOGIN VIEW

class CustomLoginView(LoginView):
    def get(self, request):
        return render(request, 'login.html')index.html

    def post(self, request):
        email = request.POST.get('email')
        password = request.POST.get('password')
        user = _Authenticator(email=email, password=password)
        if user is not None:
            login(request, user)
            return redirect('home')
        else:
            return render(request, 'login.html', {'error_message': 'Usuario o contraseña incorrectos'})

--------------------------------------------------------------------------------------------------------------------




<!--  ################################## Elementos varios utiles de la pagina que use como referencia: ############################################ -->

<!-- Codigo de conexion a facebook -->

<!-- <script>(function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = "//connect.facebook.net/es_LA/sdk.js#xfbml=1&version=v2.8&appId=148738392218835";
    fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));
    </script> -->



<!-- Codigo de conexion a google analytics -->

    <!-- <script type="text/javascript">

        var _gaq = _gaq || [];
        _gaq.push(['_setAccount', 'UA-37993161-1']);
        _gaq.push(['_trackPageview']);

        (function() {
            var ga = document.createElement('script');
            ga.type = 'text/javascript';
            ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0];
            s.parentNode.insertBefore(ga, s);
        })();
    </script> -->


<!-- Codigo de conexion a google maps -->
<!-- <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&amp;sensor=false"></script>
<script>
        var address = 'Cañada de Gómez 3850, Villa Lugano, Capital Federal, Argentina';
        var map;
        
        function initialize() {
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({ 'address': address }, function(results, status) {
            if (status != google.maps.GeocoderStatus.OK) {
                $('#map_canvas').hide();
                return;
            } 
            var loc = results[0].geometry.location;
        var mapOptions = {
            zoom: 15,
            center: loc,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };

        map = new google.maps.Map(document.getElementById('map_canvas'),
        mapOptions);

        var marker = new google.maps.Marker({
            position: loc,
            map: map
        });
    });
    return;
    }
    google.maps.event.addDomListener(window, 'load', initialize);
</script>-->


<!-- Codigo de rollback, retrocede la accion/navegador -->
    <!-- <script>
    function goBack() {
        window.history.back();
    }
</script> -->


<!--  ################################## VIEWS.PY ############################################ -->

# # FUNCION INDEPENDIENTE PARA VER LOS DATOS DEL USUARIO EN EL PERFIL
# def mi_vista(request):
#     # Obtener el CustomUser correspondiente al usuario actualmente autenticado
#     custom_user = CustomUser.objects.get(id=request.user.id)
    
#     # Renderizar la plantilla 'perfil.html' y pasarle el objeto CustomUser como contexto
#     return render(request, 'perfil.html', {'custom_user': custom_user})

# # FUNCION INDEPENDIENTE PARA GUARDAR LA FOTO DE PERFIL
# def guardar_imagen(request):
#     if request.method == 'POST' and request.FILES.get('image'):
#         imagen = request.FILES['image']
#         # Aquí puedes procesar y guardar la imagen en el servidor
#         # Por ejemplo, guardarla en la carpeta de medios de Django
#         # o en un servicio de almacenamiento en la nube como AWS S3.
#         return HttpResponse('Imagen guardada correctamente.')
#     else:
#         return HttpResponseBadRequest('Se esperaba una solicitud POST con una imagen.')

# # FUNCION INDEPENDIENTE PARA REGISTRAR UN USUARIO
# def registro_usuario(request):
#     if request.method == 'POST':
#         form = CustomUserCreateForm(request.POST)
#         if form.is_valid():
#             # Guardar el nuevo usuario en la base de datos
#             form.save()
#             # Redirigir al usuario a una página de inicio de sesión, por ejemplo
#             return redirect('index')
#     else:
#         form = CustomUserCreateForm()
#     return render(request, 'registro_usuario.html', {'form': form})

